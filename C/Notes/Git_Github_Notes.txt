notes on unit2 lesson2:
how to choose c std? compiler support the one you want to work on? no then stick with the supported one, yes - 
mcu or soc community prefer which standard ? if they prefer all then check your company's project contract to know which
standard agreed on

vs studio 2008 strict with compiler on the other hand gcc forgive in most of all codes

git init >> initialize new repo in the current directory
to init local repo (in your desktop) >>
to enable push changes on your new repo >> git config core.bare true
if you didn't do that you can read or clone the repo but you can't push changes to it
to get the last changes >> git clone
git clone /path to your repo >> in case of local repo (your desktop)
git clone username@hostIP:/path to your repo >> in case of your repo on another device on the local network

note: user and host ip of you not anything else

git clone [url of the repo] >> in case of your repo on remote server

to config user and email of your repo >> git config user.name "choosen name"
					 git config user.email "your email"
to commit >> git commit -m "your message with commit" [the file you want to commit]
gitk will show you all commits and branches 
git pull to get last changes
git stash >> if two users tried to push changes in the same time one will be pushed and the other will have to 
repair the conflict and you can repair the conflict by using git stash command to let the file contain the both modifications then you go and merge these modifications 

git add for the first time you want to add the file to git 
git commit is for adding comment to your work 
git commit also is for tranferring the file to the head tree in git system
git add to transfere the file to staging tree in git system

git log like gitk it gives log for all operations 
git checkout [branch] >>change to another branch
git checkout -b [branch] create new branch and enter it 
git checkout [commit id] >> retreive past commit i.e change 
you noramlly make a new branch for two common reasons; you want to make your master stable so you do your new features in 
in another branches then you merge it with the main code in the master branch to keep your master code clean and safe

the other reason to deploy a new release, so you put it in new branch and keep adding features in the master branch 
so if you want in the future to switch back to specific release and modify it you can do that easily.


